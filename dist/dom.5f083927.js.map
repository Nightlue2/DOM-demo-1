{"version":3,"sources":["dom.js"],"names":["window","dom","create","string","container","document","createElement","innerHTML","trim","content","firstChild","pick","node","querySelector","pickAll","querySelectorAll","length","after","oldNode","newNode","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","remove","removeChild","empty","x","array","push","attr","name","value","arguments","setAttribute","getAttribute","text","innerText","textContent","html","style","Object","object","key","addClass","className","classList","add","removeClass","hasClass","contains","on","eventName","fn","propagation","addEventListener","undefined","off","removeEventListener","children","siblings","Array","from","filter","n","next","nextElementSibling","previous","previousSibling","nodeType","each","nodeList","i","call","index","list"],"mappings":"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","file":"dom.5f083927.js","sourceRoot":"..\\src","sourcesContent":["window.dom = {\n  create(string) {\n    const container = document.createElement(\"template\");\n    container.innerHTML = string.trim();\n    return container.content.firstChild;\n  },\n  pick(string) {\n    const node = document.querySelector(string);\n    if (node !== null) {\n      return node;\n    } else {\n      return false;\n    }\n  },\n  pickAll(string) {\n    const node = document.querySelectorAll(string);\n    if (node.length === 0) {\n      return false;\n    } else {\n      return node;\n    }\n  },\n  after(oldNode, newNode) {\n    oldNode.parentNode.insertBefore(newNode, oldNode.nextSibling);\n  },\n  before(newNode, oldNode) {\n    oldNode.parentNode.insertBefore(newNode, oldNode);\n  },\n  append(parent, node) {\n    parent.appendChild(node);\n  },\n  remove(node) {\n    node.parentNode.removeChild(node);\n    return node;\n  },\n  empty(node) {\n    const array = [];\n    let x = node.firstChild;\n    while (x) {\n      array.push(dom.remove(node.firstChild));\n      x = node.firstChild;\n    }\n    return array;\n  },\n  attr(node, name, value) {\n    // 重载\n    if (arguments.length === 3) {\n      node.setAttribute(name, value);\n    } else if (arguments.length === 2) {\n      return node.getAttribute(name);\n    }\n  },\n  text(node, string) {\n    // 适配\n    if (arguments.length === 2) {\n      if (\"innerText\" in node) {\n        node.innerText = string;\n      } else {\n        node.textContent = string;\n      }\n    } else if (arguments.length === 1) {\n      if (\"innerText\" in node) {\n        return node.innerText;\n      } else {\n        return node.textContent;\n      }\n    }\n  },\n  html(node, string) {\n    if (arguments.length === 2) {\n      node.innerHTML = string;\n    } else if (arguments.length === 1) {\n      return node.innerHTML;\n    }\n  },\n  style(node, name, value) {\n    if (arguments.length === 3) {\n      // dom.style(div, 'color', 'red')\n      node.style[name] = value;\n    } else if (arguments.length === 2) {\n      if (typeof name === \"string\") {\n        // dom.style(div, 'color')\n        return node.style[name];\n      } else if (name instanceof Object) {\n        // dom.style(div, {color: 'red'})\n        const object = name;\n        for (let key in object) {\n          node.style[key] = object[key];\n        }\n      }\n    }\n  },\n  addClass(node, className) {\n    node.classList.add(className);\n  },\n  removeClass(node, className) {\n    node.classList.remove(className);\n  },\n  hasClass(node, className) {\n    return node.classList.contains(className);\n  },\n  on(node, eventName, fn, propagation) {\n    node.addEventListener(\n      eventName,\n      fn,\n      propagation === undefined ? false : propagation\n    );\n  },\n  off(node, eventName, fn, propagation) {\n    node.removeEventListener(\n      eventName,\n      fn,\n      propagation === undefined ? false : propagation\n    );\n  },\n  parent(node) {\n    return node.parentNode;\n  },\n  children(node) {\n    return node.children;\n  },\n  siblings(node) {\n    return Array.from(node.parentNode.children).filter((n) => n !== node);\n  },\n  next(node) {\n    return node.nextElementSibling;\n    // while(x && x.nodeType === 3){\n    //   x = x.nextSibling\n    // }\n  },\n  previous(node) {\n    let x = node.previousSibling;\n    while (x && x.nodeType === 3) {\n      x = x.previousSibling;\n    }\n    return x;\n  },\n  each(nodeList, fn) {\n    for (let i = 0; i < nodeList.length; i++) {\n      fn.call(null, nodeList[i]);\n    }\n  },\n  index(node) {\n    const list = dom.children(node.parentNode);\n    for (let i = 0; i < list.length; i++) {\n      if (list[i] === node) {\n        return i;\n      }\n    }\n  },\n};\n"]}